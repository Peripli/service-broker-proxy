// Code generated by counterfeiter. DO NOT EDIT.
package smfakes

import (
	"context"
	"sync"

	"github.com/Peripli/service-broker-proxy/pkg/sm"
	"github.com/Peripli/service-manager/pkg/types"
)

type FakeClient struct {
	ActivateCredentialsStub        func(context.Context, string) error
	activateCredentialsMutex       sync.RWMutex
	activateCredentialsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	activateCredentialsReturns struct {
		result1 error
	}
	activateCredentialsReturnsOnCall map[int]struct {
		result1 error
	}
	GetBrokersStub        func(context.Context) ([]*types.ServiceBroker, error)
	getBrokersMutex       sync.RWMutex
	getBrokersArgsForCall []struct {
		arg1 context.Context
	}
	getBrokersReturns struct {
		result1 []*types.ServiceBroker
		result2 error
	}
	getBrokersReturnsOnCall map[int]struct {
		result1 []*types.ServiceBroker
		result2 error
	}
	GetPlansStub        func(context.Context) ([]*types.ServicePlan, error)
	getPlansMutex       sync.RWMutex
	getPlansArgsForCall []struct {
		arg1 context.Context
	}
	getPlansReturns struct {
		result1 []*types.ServicePlan
		result2 error
	}
	getPlansReturnsOnCall map[int]struct {
		result1 []*types.ServicePlan
		result2 error
	}
	GetServiceOfferingsStub        func(context.Context) ([]*types.ServiceOffering, error)
	getServiceOfferingsMutex       sync.RWMutex
	getServiceOfferingsArgsForCall []struct {
		arg1 context.Context
	}
	getServiceOfferingsReturns struct {
		result1 []*types.ServiceOffering
		result2 error
	}
	getServiceOfferingsReturnsOnCall map[int]struct {
		result1 []*types.ServiceOffering
		result2 error
	}
	GetVisibilitiesStub        func(context.Context) ([]*types.Visibility, error)
	getVisibilitiesMutex       sync.RWMutex
	getVisibilitiesArgsForCall []struct {
		arg1 context.Context
	}
	getVisibilitiesReturns struct {
		result1 []*types.Visibility
		result2 error
	}
	getVisibilitiesReturnsOnCall map[int]struct {
		result1 []*types.Visibility
		result2 error
	}
	GetVisibilitiesByPlanStub        func(context.Context, string) ([]*types.Visibility, error)
	getVisibilitiesByPlanMutex       sync.RWMutex
	getVisibilitiesByPlanArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getVisibilitiesByPlanReturns struct {
		result1 []*types.Visibility
		result2 error
	}
	getVisibilitiesByPlanReturnsOnCall map[int]struct {
		result1 []*types.Visibility
		result2 error
	}
	PutCredentialsStub        func(context.Context, *types.BrokerPlatformCredential) (*types.BrokerPlatformCredential, error)
	putCredentialsMutex       sync.RWMutex
	putCredentialsArgsForCall []struct {
		arg1 context.Context
		arg2 *types.BrokerPlatformCredential
	}
	putCredentialsReturns struct {
		result1 *types.BrokerPlatformCredential
		result2 error
	}
	putCredentialsReturnsOnCall map[int]struct {
		result1 *types.BrokerPlatformCredential
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) ActivateCredentials(arg1 context.Context, arg2 string) error {
	fake.activateCredentialsMutex.Lock()
	ret, specificReturn := fake.activateCredentialsReturnsOnCall[len(fake.activateCredentialsArgsForCall)]
	fake.activateCredentialsArgsForCall = append(fake.activateCredentialsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ActivateCredentialsStub
	fakeReturns := fake.activateCredentialsReturns
	fake.recordInvocation("ActivateCredentials", []interface{}{arg1, arg2})
	fake.activateCredentialsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) ActivateCredentialsCallCount() int {
	fake.activateCredentialsMutex.RLock()
	defer fake.activateCredentialsMutex.RUnlock()
	return len(fake.activateCredentialsArgsForCall)
}

func (fake *FakeClient) ActivateCredentialsCalls(stub func(context.Context, string) error) {
	fake.activateCredentialsMutex.Lock()
	defer fake.activateCredentialsMutex.Unlock()
	fake.ActivateCredentialsStub = stub
}

func (fake *FakeClient) ActivateCredentialsArgsForCall(i int) (context.Context, string) {
	fake.activateCredentialsMutex.RLock()
	defer fake.activateCredentialsMutex.RUnlock()
	argsForCall := fake.activateCredentialsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) ActivateCredentialsReturns(result1 error) {
	fake.activateCredentialsMutex.Lock()
	defer fake.activateCredentialsMutex.Unlock()
	fake.ActivateCredentialsStub = nil
	fake.activateCredentialsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) ActivateCredentialsReturnsOnCall(i int, result1 error) {
	fake.activateCredentialsMutex.Lock()
	defer fake.activateCredentialsMutex.Unlock()
	fake.ActivateCredentialsStub = nil
	if fake.activateCredentialsReturnsOnCall == nil {
		fake.activateCredentialsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.activateCredentialsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) GetBrokers(arg1 context.Context) ([]*types.ServiceBroker, error) {
	fake.getBrokersMutex.Lock()
	ret, specificReturn := fake.getBrokersReturnsOnCall[len(fake.getBrokersArgsForCall)]
	fake.getBrokersArgsForCall = append(fake.getBrokersArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetBrokersStub
	fakeReturns := fake.getBrokersReturns
	fake.recordInvocation("GetBrokers", []interface{}{arg1})
	fake.getBrokersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetBrokersCallCount() int {
	fake.getBrokersMutex.RLock()
	defer fake.getBrokersMutex.RUnlock()
	return len(fake.getBrokersArgsForCall)
}

func (fake *FakeClient) GetBrokersCalls(stub func(context.Context) ([]*types.ServiceBroker, error)) {
	fake.getBrokersMutex.Lock()
	defer fake.getBrokersMutex.Unlock()
	fake.GetBrokersStub = stub
}

func (fake *FakeClient) GetBrokersArgsForCall(i int) context.Context {
	fake.getBrokersMutex.RLock()
	defer fake.getBrokersMutex.RUnlock()
	argsForCall := fake.getBrokersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetBrokersReturns(result1 []*types.ServiceBroker, result2 error) {
	fake.getBrokersMutex.Lock()
	defer fake.getBrokersMutex.Unlock()
	fake.GetBrokersStub = nil
	fake.getBrokersReturns = struct {
		result1 []*types.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetBrokersReturnsOnCall(i int, result1 []*types.ServiceBroker, result2 error) {
	fake.getBrokersMutex.Lock()
	defer fake.getBrokersMutex.Unlock()
	fake.GetBrokersStub = nil
	if fake.getBrokersReturnsOnCall == nil {
		fake.getBrokersReturnsOnCall = make(map[int]struct {
			result1 []*types.ServiceBroker
			result2 error
		})
	}
	fake.getBrokersReturnsOnCall[i] = struct {
		result1 []*types.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetPlans(arg1 context.Context) ([]*types.ServicePlan, error) {
	fake.getPlansMutex.Lock()
	ret, specificReturn := fake.getPlansReturnsOnCall[len(fake.getPlansArgsForCall)]
	fake.getPlansArgsForCall = append(fake.getPlansArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetPlansStub
	fakeReturns := fake.getPlansReturns
	fake.recordInvocation("GetPlans", []interface{}{arg1})
	fake.getPlansMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetPlansCallCount() int {
	fake.getPlansMutex.RLock()
	defer fake.getPlansMutex.RUnlock()
	return len(fake.getPlansArgsForCall)
}

func (fake *FakeClient) GetPlansCalls(stub func(context.Context) ([]*types.ServicePlan, error)) {
	fake.getPlansMutex.Lock()
	defer fake.getPlansMutex.Unlock()
	fake.GetPlansStub = stub
}

func (fake *FakeClient) GetPlansArgsForCall(i int) context.Context {
	fake.getPlansMutex.RLock()
	defer fake.getPlansMutex.RUnlock()
	argsForCall := fake.getPlansArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetPlansReturns(result1 []*types.ServicePlan, result2 error) {
	fake.getPlansMutex.Lock()
	defer fake.getPlansMutex.Unlock()
	fake.GetPlansStub = nil
	fake.getPlansReturns = struct {
		result1 []*types.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetPlansReturnsOnCall(i int, result1 []*types.ServicePlan, result2 error) {
	fake.getPlansMutex.Lock()
	defer fake.getPlansMutex.Unlock()
	fake.GetPlansStub = nil
	if fake.getPlansReturnsOnCall == nil {
		fake.getPlansReturnsOnCall = make(map[int]struct {
			result1 []*types.ServicePlan
			result2 error
		})
	}
	fake.getPlansReturnsOnCall[i] = struct {
		result1 []*types.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetServiceOfferings(arg1 context.Context) ([]*types.ServiceOffering, error) {
	fake.getServiceOfferingsMutex.Lock()
	ret, specificReturn := fake.getServiceOfferingsReturnsOnCall[len(fake.getServiceOfferingsArgsForCall)]
	fake.getServiceOfferingsArgsForCall = append(fake.getServiceOfferingsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetServiceOfferingsStub
	fakeReturns := fake.getServiceOfferingsReturns
	fake.recordInvocation("GetServiceOfferings", []interface{}{arg1})
	fake.getServiceOfferingsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetServiceOfferingsCallCount() int {
	fake.getServiceOfferingsMutex.RLock()
	defer fake.getServiceOfferingsMutex.RUnlock()
	return len(fake.getServiceOfferingsArgsForCall)
}

func (fake *FakeClient) GetServiceOfferingsCalls(stub func(context.Context) ([]*types.ServiceOffering, error)) {
	fake.getServiceOfferingsMutex.Lock()
	defer fake.getServiceOfferingsMutex.Unlock()
	fake.GetServiceOfferingsStub = stub
}

func (fake *FakeClient) GetServiceOfferingsArgsForCall(i int) context.Context {
	fake.getServiceOfferingsMutex.RLock()
	defer fake.getServiceOfferingsMutex.RUnlock()
	argsForCall := fake.getServiceOfferingsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetServiceOfferingsReturns(result1 []*types.ServiceOffering, result2 error) {
	fake.getServiceOfferingsMutex.Lock()
	defer fake.getServiceOfferingsMutex.Unlock()
	fake.GetServiceOfferingsStub = nil
	fake.getServiceOfferingsReturns = struct {
		result1 []*types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetServiceOfferingsReturnsOnCall(i int, result1 []*types.ServiceOffering, result2 error) {
	fake.getServiceOfferingsMutex.Lock()
	defer fake.getServiceOfferingsMutex.Unlock()
	fake.GetServiceOfferingsStub = nil
	if fake.getServiceOfferingsReturnsOnCall == nil {
		fake.getServiceOfferingsReturnsOnCall = make(map[int]struct {
			result1 []*types.ServiceOffering
			result2 error
		})
	}
	fake.getServiceOfferingsReturnsOnCall[i] = struct {
		result1 []*types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetVisibilities(arg1 context.Context) ([]*types.Visibility, error) {
	fake.getVisibilitiesMutex.Lock()
	ret, specificReturn := fake.getVisibilitiesReturnsOnCall[len(fake.getVisibilitiesArgsForCall)]
	fake.getVisibilitiesArgsForCall = append(fake.getVisibilitiesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetVisibilitiesStub
	fakeReturns := fake.getVisibilitiesReturns
	fake.recordInvocation("GetVisibilities", []interface{}{arg1})
	fake.getVisibilitiesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetVisibilitiesCallCount() int {
	fake.getVisibilitiesMutex.RLock()
	defer fake.getVisibilitiesMutex.RUnlock()
	return len(fake.getVisibilitiesArgsForCall)
}

func (fake *FakeClient) GetVisibilitiesCalls(stub func(context.Context) ([]*types.Visibility, error)) {
	fake.getVisibilitiesMutex.Lock()
	defer fake.getVisibilitiesMutex.Unlock()
	fake.GetVisibilitiesStub = stub
}

func (fake *FakeClient) GetVisibilitiesArgsForCall(i int) context.Context {
	fake.getVisibilitiesMutex.RLock()
	defer fake.getVisibilitiesMutex.RUnlock()
	argsForCall := fake.getVisibilitiesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetVisibilitiesReturns(result1 []*types.Visibility, result2 error) {
	fake.getVisibilitiesMutex.Lock()
	defer fake.getVisibilitiesMutex.Unlock()
	fake.GetVisibilitiesStub = nil
	fake.getVisibilitiesReturns = struct {
		result1 []*types.Visibility
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetVisibilitiesReturnsOnCall(i int, result1 []*types.Visibility, result2 error) {
	fake.getVisibilitiesMutex.Lock()
	defer fake.getVisibilitiesMutex.Unlock()
	fake.GetVisibilitiesStub = nil
	if fake.getVisibilitiesReturnsOnCall == nil {
		fake.getVisibilitiesReturnsOnCall = make(map[int]struct {
			result1 []*types.Visibility
			result2 error
		})
	}
	fake.getVisibilitiesReturnsOnCall[i] = struct {
		result1 []*types.Visibility
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetVisibilitiesByPlan(arg1 context.Context, arg2 string) ([]*types.Visibility, error) {
	fake.getVisibilitiesByPlanMutex.Lock()
	ret, specificReturn := fake.getVisibilitiesByPlanReturnsOnCall[len(fake.getVisibilitiesByPlanArgsForCall)]
	fake.getVisibilitiesByPlanArgsForCall = append(fake.getVisibilitiesByPlanArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetVisibilitiesByPlanStub
	fakeReturns := fake.getVisibilitiesByPlanReturns
	fake.recordInvocation("GetVisibilitiesByPlan", []interface{}{arg1, arg2})
	fake.getVisibilitiesByPlanMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetVisibilitiesByPlanCallCount() int {
	fake.getVisibilitiesByPlanMutex.RLock()
	defer fake.getVisibilitiesByPlanMutex.RUnlock()
	return len(fake.getVisibilitiesByPlanArgsForCall)
}

func (fake *FakeClient) GetVisibilitiesByPlanCalls(stub func(context.Context, string) ([]*types.Visibility, error)) {
	fake.getVisibilitiesByPlanMutex.Lock()
	defer fake.getVisibilitiesByPlanMutex.Unlock()
	fake.GetVisibilitiesByPlanStub = stub
}

func (fake *FakeClient) GetVisibilitiesByPlanArgsForCall(i int) (context.Context, string) {
	fake.getVisibilitiesByPlanMutex.RLock()
	defer fake.getVisibilitiesByPlanMutex.RUnlock()
	argsForCall := fake.getVisibilitiesByPlanArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) GetVisibilitiesByPlanReturns(result1 []*types.Visibility, result2 error) {
	fake.getVisibilitiesByPlanMutex.Lock()
	defer fake.getVisibilitiesByPlanMutex.Unlock()
	fake.GetVisibilitiesByPlanStub = nil
	fake.getVisibilitiesByPlanReturns = struct {
		result1 []*types.Visibility
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetVisibilitiesByPlanReturnsOnCall(i int, result1 []*types.Visibility, result2 error) {
	fake.getVisibilitiesByPlanMutex.Lock()
	defer fake.getVisibilitiesByPlanMutex.Unlock()
	fake.GetVisibilitiesByPlanStub = nil
	if fake.getVisibilitiesByPlanReturnsOnCall == nil {
		fake.getVisibilitiesByPlanReturnsOnCall = make(map[int]struct {
			result1 []*types.Visibility
			result2 error
		})
	}
	fake.getVisibilitiesByPlanReturnsOnCall[i] = struct {
		result1 []*types.Visibility
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) PutCredentials(arg1 context.Context, arg2 *types.BrokerPlatformCredential) (*types.BrokerPlatformCredential, error) {
	fake.putCredentialsMutex.Lock()
	ret, specificReturn := fake.putCredentialsReturnsOnCall[len(fake.putCredentialsArgsForCall)]
	fake.putCredentialsArgsForCall = append(fake.putCredentialsArgsForCall, struct {
		arg1 context.Context
		arg2 *types.BrokerPlatformCredential
	}{arg1, arg2})
	stub := fake.PutCredentialsStub
	fakeReturns := fake.putCredentialsReturns
	fake.recordInvocation("PutCredentials", []interface{}{arg1, arg2})
	fake.putCredentialsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) PutCredentialsCallCount() int {
	fake.putCredentialsMutex.RLock()
	defer fake.putCredentialsMutex.RUnlock()
	return len(fake.putCredentialsArgsForCall)
}

func (fake *FakeClient) PutCredentialsCalls(stub func(context.Context, *types.BrokerPlatformCredential) (*types.BrokerPlatformCredential, error)) {
	fake.putCredentialsMutex.Lock()
	defer fake.putCredentialsMutex.Unlock()
	fake.PutCredentialsStub = stub
}

func (fake *FakeClient) PutCredentialsArgsForCall(i int) (context.Context, *types.BrokerPlatformCredential) {
	fake.putCredentialsMutex.RLock()
	defer fake.putCredentialsMutex.RUnlock()
	argsForCall := fake.putCredentialsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) PutCredentialsReturns(result1 *types.BrokerPlatformCredential, result2 error) {
	fake.putCredentialsMutex.Lock()
	defer fake.putCredentialsMutex.Unlock()
	fake.PutCredentialsStub = nil
	fake.putCredentialsReturns = struct {
		result1 *types.BrokerPlatformCredential
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) PutCredentialsReturnsOnCall(i int, result1 *types.BrokerPlatformCredential, result2 error) {
	fake.putCredentialsMutex.Lock()
	defer fake.putCredentialsMutex.Unlock()
	fake.PutCredentialsStub = nil
	if fake.putCredentialsReturnsOnCall == nil {
		fake.putCredentialsReturnsOnCall = make(map[int]struct {
			result1 *types.BrokerPlatformCredential
			result2 error
		})
	}
	fake.putCredentialsReturnsOnCall[i] = struct {
		result1 *types.BrokerPlatformCredential
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.activateCredentialsMutex.RLock()
	defer fake.activateCredentialsMutex.RUnlock()
	fake.getBrokersMutex.RLock()
	defer fake.getBrokersMutex.RUnlock()
	fake.getPlansMutex.RLock()
	defer fake.getPlansMutex.RUnlock()
	fake.getServiceOfferingsMutex.RLock()
	defer fake.getServiceOfferingsMutex.RUnlock()
	fake.getVisibilitiesMutex.RLock()
	defer fake.getVisibilitiesMutex.RUnlock()
	fake.getVisibilitiesByPlanMutex.RLock()
	defer fake.getVisibilitiesByPlanMutex.RUnlock()
	fake.putCredentialsMutex.RLock()
	defer fake.putCredentialsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sm.Client = new(FakeClient)
