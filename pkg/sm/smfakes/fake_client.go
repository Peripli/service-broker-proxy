// Code generated by counterfeiter. DO NOT EDIT.
package smfakes

import (
	context "context"
	sync "sync"

	sm "github.com/Peripli/service-broker-proxy/pkg/sm"
	types "github.com/Peripli/service-manager/pkg/types"
)

type FakeClient struct {
	GetBrokersStub        func(context.Context) ([]sm.Broker, error)
	getBrokersMutex       sync.RWMutex
	getBrokersArgsForCall []struct {
		arg1 context.Context
	}
	getBrokersReturns struct {
		result1 []sm.Broker
		result2 error
	}
	getBrokersReturnsOnCall map[int]struct {
		result1 []sm.Broker
		result2 error
	}
	GetPlansStub        func(context.Context) ([]*types.ServicePlan, error)
	getPlansMutex       sync.RWMutex
	getPlansArgsForCall []struct {
		arg1 context.Context
	}
	getPlansReturns struct {
		result1 []*types.ServicePlan
		result2 error
	}
	getPlansReturnsOnCall map[int]struct {
		result1 []*types.ServicePlan
		result2 error
	}
	GetPlansByServiceOfferingsStub        func(context.Context, []*types.ServiceOffering) ([]*types.ServicePlan, error)
	getPlansByServiceOfferingsMutex       sync.RWMutex
	getPlansByServiceOfferingsArgsForCall []struct {
		arg1 context.Context
		arg2 []*types.ServiceOffering
	}
	getPlansByServiceOfferingsReturns struct {
		result1 []*types.ServicePlan
		result2 error
	}
	getPlansByServiceOfferingsReturnsOnCall map[int]struct {
		result1 []*types.ServicePlan
		result2 error
	}
	GetServiceOfferingsByBrokerIDStub        func(context.Context, string) ([]*types.ServiceOffering, error)
	getServiceOfferingsByBrokerIDMutex       sync.RWMutex
	getServiceOfferingsByBrokerIDArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getServiceOfferingsByBrokerIDReturns struct {
		result1 []*types.ServiceOffering
		result2 error
	}
	getServiceOfferingsByBrokerIDReturnsOnCall map[int]struct {
		result1 []*types.ServiceOffering
		result2 error
	}
	GetVisibilitiesStub        func(context.Context) ([]*types.Visibility, error)
	getVisibilitiesMutex       sync.RWMutex
	getVisibilitiesArgsForCall []struct {
		arg1 context.Context
	}
	getVisibilitiesReturns struct {
		result1 []*types.Visibility
		result2 error
	}
	getVisibilitiesReturnsOnCall map[int]struct {
		result1 []*types.Visibility
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) GetBrokers(arg1 context.Context) ([]sm.Broker, error) {
	fake.getBrokersMutex.Lock()
	ret, specificReturn := fake.getBrokersReturnsOnCall[len(fake.getBrokersArgsForCall)]
	fake.getBrokersArgsForCall = append(fake.getBrokersArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("GetBrokers", []interface{}{arg1})
	fake.getBrokersMutex.Unlock()
	if fake.GetBrokersStub != nil {
		return fake.GetBrokersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBrokersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetBrokersCallCount() int {
	fake.getBrokersMutex.RLock()
	defer fake.getBrokersMutex.RUnlock()
	return len(fake.getBrokersArgsForCall)
}

func (fake *FakeClient) GetBrokersCalls(stub func(context.Context) ([]sm.Broker, error)) {
	fake.getBrokersMutex.Lock()
	defer fake.getBrokersMutex.Unlock()
	fake.GetBrokersStub = stub
}

func (fake *FakeClient) GetBrokersArgsForCall(i int) context.Context {
	fake.getBrokersMutex.RLock()
	defer fake.getBrokersMutex.RUnlock()
	argsForCall := fake.getBrokersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetBrokersReturns(result1 []sm.Broker, result2 error) {
	fake.getBrokersMutex.Lock()
	defer fake.getBrokersMutex.Unlock()
	fake.GetBrokersStub = nil
	fake.getBrokersReturns = struct {
		result1 []sm.Broker
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetBrokersReturnsOnCall(i int, result1 []sm.Broker, result2 error) {
	fake.getBrokersMutex.Lock()
	defer fake.getBrokersMutex.Unlock()
	fake.GetBrokersStub = nil
	if fake.getBrokersReturnsOnCall == nil {
		fake.getBrokersReturnsOnCall = make(map[int]struct {
			result1 []sm.Broker
			result2 error
		})
	}
	fake.getBrokersReturnsOnCall[i] = struct {
		result1 []sm.Broker
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetPlans(arg1 context.Context) ([]*types.ServicePlan, error) {
	fake.getPlansMutex.Lock()
	ret, specificReturn := fake.getPlansReturnsOnCall[len(fake.getPlansArgsForCall)]
	fake.getPlansArgsForCall = append(fake.getPlansArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("GetPlans", []interface{}{arg1})
	fake.getPlansMutex.Unlock()
	if fake.GetPlansStub != nil {
		return fake.GetPlansStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPlansReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetPlansCallCount() int {
	fake.getPlansMutex.RLock()
	defer fake.getPlansMutex.RUnlock()
	return len(fake.getPlansArgsForCall)
}

func (fake *FakeClient) GetPlansCalls(stub func(context.Context) ([]*types.ServicePlan, error)) {
	fake.getPlansMutex.Lock()
	defer fake.getPlansMutex.Unlock()
	fake.GetPlansStub = stub
}

func (fake *FakeClient) GetPlansArgsForCall(i int) context.Context {
	fake.getPlansMutex.RLock()
	defer fake.getPlansMutex.RUnlock()
	argsForCall := fake.getPlansArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetPlansReturns(result1 []*types.ServicePlan, result2 error) {
	fake.getPlansMutex.Lock()
	defer fake.getPlansMutex.Unlock()
	fake.GetPlansStub = nil
	fake.getPlansReturns = struct {
		result1 []*types.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetPlansReturnsOnCall(i int, result1 []*types.ServicePlan, result2 error) {
	fake.getPlansMutex.Lock()
	defer fake.getPlansMutex.Unlock()
	fake.GetPlansStub = nil
	if fake.getPlansReturnsOnCall == nil {
		fake.getPlansReturnsOnCall = make(map[int]struct {
			result1 []*types.ServicePlan
			result2 error
		})
	}
	fake.getPlansReturnsOnCall[i] = struct {
		result1 []*types.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetPlansByServiceOfferings(arg1 context.Context, arg2 []*types.ServiceOffering) ([]*types.ServicePlan, error) {
	var arg2Copy []*types.ServiceOffering
	if arg2 != nil {
		arg2Copy = make([]*types.ServiceOffering, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.getPlansByServiceOfferingsMutex.Lock()
	ret, specificReturn := fake.getPlansByServiceOfferingsReturnsOnCall[len(fake.getPlansByServiceOfferingsArgsForCall)]
	fake.getPlansByServiceOfferingsArgsForCall = append(fake.getPlansByServiceOfferingsArgsForCall, struct {
		arg1 context.Context
		arg2 []*types.ServiceOffering
	}{arg1, arg2Copy})
	fake.recordInvocation("GetPlansByServiceOfferings", []interface{}{arg1, arg2Copy})
	fake.getPlansByServiceOfferingsMutex.Unlock()
	if fake.GetPlansByServiceOfferingsStub != nil {
		return fake.GetPlansByServiceOfferingsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPlansByServiceOfferingsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetPlansByServiceOfferingsCallCount() int {
	fake.getPlansByServiceOfferingsMutex.RLock()
	defer fake.getPlansByServiceOfferingsMutex.RUnlock()
	return len(fake.getPlansByServiceOfferingsArgsForCall)
}

func (fake *FakeClient) GetPlansByServiceOfferingsCalls(stub func(context.Context, []*types.ServiceOffering) ([]*types.ServicePlan, error)) {
	fake.getPlansByServiceOfferingsMutex.Lock()
	defer fake.getPlansByServiceOfferingsMutex.Unlock()
	fake.GetPlansByServiceOfferingsStub = stub
}

func (fake *FakeClient) GetPlansByServiceOfferingsArgsForCall(i int) (context.Context, []*types.ServiceOffering) {
	fake.getPlansByServiceOfferingsMutex.RLock()
	defer fake.getPlansByServiceOfferingsMutex.RUnlock()
	argsForCall := fake.getPlansByServiceOfferingsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) GetPlansByServiceOfferingsReturns(result1 []*types.ServicePlan, result2 error) {
	fake.getPlansByServiceOfferingsMutex.Lock()
	defer fake.getPlansByServiceOfferingsMutex.Unlock()
	fake.GetPlansByServiceOfferingsStub = nil
	fake.getPlansByServiceOfferingsReturns = struct {
		result1 []*types.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetPlansByServiceOfferingsReturnsOnCall(i int, result1 []*types.ServicePlan, result2 error) {
	fake.getPlansByServiceOfferingsMutex.Lock()
	defer fake.getPlansByServiceOfferingsMutex.Unlock()
	fake.GetPlansByServiceOfferingsStub = nil
	if fake.getPlansByServiceOfferingsReturnsOnCall == nil {
		fake.getPlansByServiceOfferingsReturnsOnCall = make(map[int]struct {
			result1 []*types.ServicePlan
			result2 error
		})
	}
	fake.getPlansByServiceOfferingsReturnsOnCall[i] = struct {
		result1 []*types.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetServiceOfferingsByBrokerID(arg1 context.Context, arg2 string) ([]*types.ServiceOffering, error) {
	fake.getServiceOfferingsByBrokerIDMutex.Lock()
	ret, specificReturn := fake.getServiceOfferingsByBrokerIDReturnsOnCall[len(fake.getServiceOfferingsByBrokerIDArgsForCall)]
	fake.getServiceOfferingsByBrokerIDArgsForCall = append(fake.getServiceOfferingsByBrokerIDArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetServiceOfferingsByBrokerID", []interface{}{arg1, arg2})
	fake.getServiceOfferingsByBrokerIDMutex.Unlock()
	if fake.GetServiceOfferingsByBrokerIDStub != nil {
		return fake.GetServiceOfferingsByBrokerIDStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceOfferingsByBrokerIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetServiceOfferingsByBrokerIDCallCount() int {
	fake.getServiceOfferingsByBrokerIDMutex.RLock()
	defer fake.getServiceOfferingsByBrokerIDMutex.RUnlock()
	return len(fake.getServiceOfferingsByBrokerIDArgsForCall)
}

func (fake *FakeClient) GetServiceOfferingsByBrokerIDCalls(stub func(context.Context, string) ([]*types.ServiceOffering, error)) {
	fake.getServiceOfferingsByBrokerIDMutex.Lock()
	defer fake.getServiceOfferingsByBrokerIDMutex.Unlock()
	fake.GetServiceOfferingsByBrokerIDStub = stub
}

func (fake *FakeClient) GetServiceOfferingsByBrokerIDArgsForCall(i int) (context.Context, string) {
	fake.getServiceOfferingsByBrokerIDMutex.RLock()
	defer fake.getServiceOfferingsByBrokerIDMutex.RUnlock()
	argsForCall := fake.getServiceOfferingsByBrokerIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) GetServiceOfferingsByBrokerIDReturns(result1 []*types.ServiceOffering, result2 error) {
	fake.getServiceOfferingsByBrokerIDMutex.Lock()
	defer fake.getServiceOfferingsByBrokerIDMutex.Unlock()
	fake.GetServiceOfferingsByBrokerIDStub = nil
	fake.getServiceOfferingsByBrokerIDReturns = struct {
		result1 []*types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetServiceOfferingsByBrokerIDReturnsOnCall(i int, result1 []*types.ServiceOffering, result2 error) {
	fake.getServiceOfferingsByBrokerIDMutex.Lock()
	defer fake.getServiceOfferingsByBrokerIDMutex.Unlock()
	fake.GetServiceOfferingsByBrokerIDStub = nil
	if fake.getServiceOfferingsByBrokerIDReturnsOnCall == nil {
		fake.getServiceOfferingsByBrokerIDReturnsOnCall = make(map[int]struct {
			result1 []*types.ServiceOffering
			result2 error
		})
	}
	fake.getServiceOfferingsByBrokerIDReturnsOnCall[i] = struct {
		result1 []*types.ServiceOffering
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetVisibilities(arg1 context.Context) ([]*types.Visibility, error) {
	fake.getVisibilitiesMutex.Lock()
	ret, specificReturn := fake.getVisibilitiesReturnsOnCall[len(fake.getVisibilitiesArgsForCall)]
	fake.getVisibilitiesArgsForCall = append(fake.getVisibilitiesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("GetVisibilities", []interface{}{arg1})
	fake.getVisibilitiesMutex.Unlock()
	if fake.GetVisibilitiesStub != nil {
		return fake.GetVisibilitiesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getVisibilitiesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetVisibilitiesCallCount() int {
	fake.getVisibilitiesMutex.RLock()
	defer fake.getVisibilitiesMutex.RUnlock()
	return len(fake.getVisibilitiesArgsForCall)
}

func (fake *FakeClient) GetVisibilitiesCalls(stub func(context.Context) ([]*types.Visibility, error)) {
	fake.getVisibilitiesMutex.Lock()
	defer fake.getVisibilitiesMutex.Unlock()
	fake.GetVisibilitiesStub = stub
}

func (fake *FakeClient) GetVisibilitiesArgsForCall(i int) context.Context {
	fake.getVisibilitiesMutex.RLock()
	defer fake.getVisibilitiesMutex.RUnlock()
	argsForCall := fake.getVisibilitiesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetVisibilitiesReturns(result1 []*types.Visibility, result2 error) {
	fake.getVisibilitiesMutex.Lock()
	defer fake.getVisibilitiesMutex.Unlock()
	fake.GetVisibilitiesStub = nil
	fake.getVisibilitiesReturns = struct {
		result1 []*types.Visibility
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetVisibilitiesReturnsOnCall(i int, result1 []*types.Visibility, result2 error) {
	fake.getVisibilitiesMutex.Lock()
	defer fake.getVisibilitiesMutex.Unlock()
	fake.GetVisibilitiesStub = nil
	if fake.getVisibilitiesReturnsOnCall == nil {
		fake.getVisibilitiesReturnsOnCall = make(map[int]struct {
			result1 []*types.Visibility
			result2 error
		})
	}
	fake.getVisibilitiesReturnsOnCall[i] = struct {
		result1 []*types.Visibility
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBrokersMutex.RLock()
	defer fake.getBrokersMutex.RUnlock()
	fake.getPlansMutex.RLock()
	defer fake.getPlansMutex.RUnlock()
	fake.getPlansByServiceOfferingsMutex.RLock()
	defer fake.getPlansByServiceOfferingsMutex.RUnlock()
	fake.getServiceOfferingsByBrokerIDMutex.RLock()
	defer fake.getServiceOfferingsByBrokerIDMutex.RUnlock()
	fake.getVisibilitiesMutex.RLock()
	defer fake.getVisibilitiesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sm.Client = new(FakeClient)
