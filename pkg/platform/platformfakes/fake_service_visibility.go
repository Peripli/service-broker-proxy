// Code generated by counterfeiter. DO NOT EDIT.
package platformfakes

import (
	context "context"
	sync "sync"

	platform "github.com/Peripli/service-broker-proxy/pkg/platform"
	types "github.com/Peripli/service-manager/pkg/types"
)

type FakeServiceVisibility struct {
	GetVisibilitiesByPlansStub        func(context.Context, []*types.ServicePlan) ([]*platform.ServiceVisibilityEntity, error)
	getVisibilitiesByPlansMutex       sync.RWMutex
	getVisibilitiesByPlansArgsForCall []struct {
		arg1 context.Context
		arg2 []*types.ServicePlan
	}
	getVisibilitiesByPlansReturns struct {
		result1 []*platform.ServiceVisibilityEntity
		result2 error
	}
	getVisibilitiesByPlansReturnsOnCall map[int]struct {
		result1 []*platform.ServiceVisibilityEntity
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceVisibility) GetVisibilitiesByPlans(arg1 context.Context, arg2 []*types.ServicePlan) ([]*platform.ServiceVisibilityEntity, error) {
	var arg2Copy []*types.ServicePlan
	if arg2 != nil {
		arg2Copy = make([]*types.ServicePlan, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.getVisibilitiesByPlansMutex.Lock()
	ret, specificReturn := fake.getVisibilitiesByPlansReturnsOnCall[len(fake.getVisibilitiesByPlansArgsForCall)]
	fake.getVisibilitiesByPlansArgsForCall = append(fake.getVisibilitiesByPlansArgsForCall, struct {
		arg1 context.Context
		arg2 []*types.ServicePlan
	}{arg1, arg2Copy})
	fake.recordInvocation("GetVisibilitiesByPlans", []interface{}{arg1, arg2Copy})
	fake.getVisibilitiesByPlansMutex.Unlock()
	if fake.GetVisibilitiesByPlansStub != nil {
		return fake.GetVisibilitiesByPlansStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getVisibilitiesByPlansReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceVisibility) GetVisibilitiesByPlansCallCount() int {
	fake.getVisibilitiesByPlansMutex.RLock()
	defer fake.getVisibilitiesByPlansMutex.RUnlock()
	return len(fake.getVisibilitiesByPlansArgsForCall)
}

func (fake *FakeServiceVisibility) GetVisibilitiesByPlansCalls(stub func(context.Context, []*types.ServicePlan) ([]*platform.ServiceVisibilityEntity, error)) {
	fake.getVisibilitiesByPlansMutex.Lock()
	defer fake.getVisibilitiesByPlansMutex.Unlock()
	fake.GetVisibilitiesByPlansStub = stub
}

func (fake *FakeServiceVisibility) GetVisibilitiesByPlansArgsForCall(i int) (context.Context, []*types.ServicePlan) {
	fake.getVisibilitiesByPlansMutex.RLock()
	defer fake.getVisibilitiesByPlansMutex.RUnlock()
	argsForCall := fake.getVisibilitiesByPlansArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceVisibility) GetVisibilitiesByPlansReturns(result1 []*platform.ServiceVisibilityEntity, result2 error) {
	fake.getVisibilitiesByPlansMutex.Lock()
	defer fake.getVisibilitiesByPlansMutex.Unlock()
	fake.GetVisibilitiesByPlansStub = nil
	fake.getVisibilitiesByPlansReturns = struct {
		result1 []*platform.ServiceVisibilityEntity
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceVisibility) GetVisibilitiesByPlansReturnsOnCall(i int, result1 []*platform.ServiceVisibilityEntity, result2 error) {
	fake.getVisibilitiesByPlansMutex.Lock()
	defer fake.getVisibilitiesByPlansMutex.Unlock()
	fake.GetVisibilitiesByPlansStub = nil
	if fake.getVisibilitiesByPlansReturnsOnCall == nil {
		fake.getVisibilitiesByPlansReturnsOnCall = make(map[int]struct {
			result1 []*platform.ServiceVisibilityEntity
			result2 error
		})
	}
	fake.getVisibilitiesByPlansReturnsOnCall[i] = struct {
		result1 []*platform.ServiceVisibilityEntity
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceVisibility) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getVisibilitiesByPlansMutex.RLock()
	defer fake.getVisibilitiesByPlansMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceVisibility) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ platform.ServiceVisibility = new(FakeServiceVisibility)
