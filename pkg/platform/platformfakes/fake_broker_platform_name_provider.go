// Code generated by counterfeiter. DO NOT EDIT.
package platformfakes

import (
	"sync"

	"github.com/Peripli/service-broker-proxy/pkg/platform"
)

type FakeBrokerPlatformNameProvider struct {
	GetBrokerPlatformNameStub        func(string) string
	getBrokerPlatformNameMutex       sync.RWMutex
	getBrokerPlatformNameArgsForCall []struct {
		arg1 string
	}
	getBrokerPlatformNameReturns struct {
		result1 string
	}
	getBrokerPlatformNameReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBrokerPlatformNameProvider) GetBrokerPlatformName(arg1 string) string {
	fake.getBrokerPlatformNameMutex.Lock()
	ret, specificReturn := fake.getBrokerPlatformNameReturnsOnCall[len(fake.getBrokerPlatformNameArgsForCall)]
	fake.getBrokerPlatformNameArgsForCall = append(fake.getBrokerPlatformNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetBrokerPlatformName", []interface{}{arg1})
	fake.getBrokerPlatformNameMutex.Unlock()
	if fake.GetBrokerPlatformNameStub != nil {
		return fake.GetBrokerPlatformNameStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getBrokerPlatformNameReturns
	return fakeReturns.result1
}

func (fake *FakeBrokerPlatformNameProvider) GetBrokerPlatformNameCallCount() int {
	fake.getBrokerPlatformNameMutex.RLock()
	defer fake.getBrokerPlatformNameMutex.RUnlock()
	return len(fake.getBrokerPlatformNameArgsForCall)
}

func (fake *FakeBrokerPlatformNameProvider) GetBrokerPlatformNameCalls(stub func(string) string) {
	fake.getBrokerPlatformNameMutex.Lock()
	defer fake.getBrokerPlatformNameMutex.Unlock()
	fake.GetBrokerPlatformNameStub = stub
}

func (fake *FakeBrokerPlatformNameProvider) GetBrokerPlatformNameArgsForCall(i int) string {
	fake.getBrokerPlatformNameMutex.RLock()
	defer fake.getBrokerPlatformNameMutex.RUnlock()
	argsForCall := fake.getBrokerPlatformNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBrokerPlatformNameProvider) GetBrokerPlatformNameReturns(result1 string) {
	fake.getBrokerPlatformNameMutex.Lock()
	defer fake.getBrokerPlatformNameMutex.Unlock()
	fake.GetBrokerPlatformNameStub = nil
	fake.getBrokerPlatformNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBrokerPlatformNameProvider) GetBrokerPlatformNameReturnsOnCall(i int, result1 string) {
	fake.getBrokerPlatformNameMutex.Lock()
	defer fake.getBrokerPlatformNameMutex.Unlock()
	fake.GetBrokerPlatformNameStub = nil
	if fake.getBrokerPlatformNameReturnsOnCall == nil {
		fake.getBrokerPlatformNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getBrokerPlatformNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeBrokerPlatformNameProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBrokerPlatformNameMutex.RLock()
	defer fake.getBrokerPlatformNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBrokerPlatformNameProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ platform.BrokerPlatformNameProvider = new(FakeBrokerPlatformNameProvider)
