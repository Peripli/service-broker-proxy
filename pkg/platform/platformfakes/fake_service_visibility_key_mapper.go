// Code generated by counterfeiter. DO NOT EDIT.
package platformfakes

import (
	sync "sync"

	platform "github.com/Peripli/service-broker-proxy/pkg/platform"
)

type FakeServiceVisibilityKeyMapper struct {
	MapStub        func(*platform.ServiceVisibilityEntity) string
	mapMutex       sync.RWMutex
	mapArgsForCall []struct {
		arg1 *platform.ServiceVisibilityEntity
	}
	mapReturns struct {
		result1 string
	}
	mapReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceVisibilityKeyMapper) Map(arg1 *platform.ServiceVisibilityEntity) string {
	fake.mapMutex.Lock()
	ret, specificReturn := fake.mapReturnsOnCall[len(fake.mapArgsForCall)]
	fake.mapArgsForCall = append(fake.mapArgsForCall, struct {
		arg1 *platform.ServiceVisibilityEntity
	}{arg1})
	fake.recordInvocation("Map", []interface{}{arg1})
	fake.mapMutex.Unlock()
	if fake.MapStub != nil {
		return fake.MapStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.mapReturns
	return fakeReturns.result1
}

func (fake *FakeServiceVisibilityKeyMapper) MapCallCount() int {
	fake.mapMutex.RLock()
	defer fake.mapMutex.RUnlock()
	return len(fake.mapArgsForCall)
}

func (fake *FakeServiceVisibilityKeyMapper) MapCalls(stub func(*platform.ServiceVisibilityEntity) string) {
	fake.mapMutex.Lock()
	defer fake.mapMutex.Unlock()
	fake.MapStub = stub
}

func (fake *FakeServiceVisibilityKeyMapper) MapArgsForCall(i int) *platform.ServiceVisibilityEntity {
	fake.mapMutex.RLock()
	defer fake.mapMutex.RUnlock()
	argsForCall := fake.mapArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceVisibilityKeyMapper) MapReturns(result1 string) {
	fake.mapMutex.Lock()
	defer fake.mapMutex.Unlock()
	fake.MapStub = nil
	fake.mapReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeServiceVisibilityKeyMapper) MapReturnsOnCall(i int, result1 string) {
	fake.mapMutex.Lock()
	defer fake.mapMutex.Unlock()
	fake.MapStub = nil
	if fake.mapReturnsOnCall == nil {
		fake.mapReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.mapReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeServiceVisibilityKeyMapper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mapMutex.RLock()
	defer fake.mapMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceVisibilityKeyMapper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ platform.ServiceVisibilityKeyMapper = new(FakeServiceVisibilityKeyMapper)
